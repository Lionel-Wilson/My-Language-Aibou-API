// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPaymentTransactions(t *testing.T) {
	t.Parallel()

	query := PaymentTransactions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPaymentTransactionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentTransaction{}
	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PaymentTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPaymentTransactionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentTransaction{}
	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PaymentTransactions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PaymentTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPaymentTransactionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentTransaction{}
	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PaymentTransactionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PaymentTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPaymentTransactionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentTransaction{}
	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PaymentTransactionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PaymentTransaction exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PaymentTransactionExists to return true, but got false.")
	}
}

func testPaymentTransactionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentTransaction{}
	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	paymentTransactionFound, err := FindPaymentTransaction(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if paymentTransactionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPaymentTransactionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentTransaction{}
	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PaymentTransactions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPaymentTransactionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentTransaction{}
	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PaymentTransactions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPaymentTransactionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	paymentTransactionOne := &PaymentTransaction{}
	paymentTransactionTwo := &PaymentTransaction{}
	if err = randomize.Struct(seed, paymentTransactionOne, paymentTransactionDBTypes, false, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}
	if err = randomize.Struct(seed, paymentTransactionTwo, paymentTransactionDBTypes, false, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = paymentTransactionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = paymentTransactionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PaymentTransactions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPaymentTransactionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	paymentTransactionOne := &PaymentTransaction{}
	paymentTransactionTwo := &PaymentTransaction{}
	if err = randomize.Struct(seed, paymentTransactionOne, paymentTransactionDBTypes, false, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}
	if err = randomize.Struct(seed, paymentTransactionTwo, paymentTransactionDBTypes, false, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = paymentTransactionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = paymentTransactionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PaymentTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func paymentTransactionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PaymentTransaction) error {
	*o = PaymentTransaction{}
	return nil
}

func paymentTransactionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PaymentTransaction) error {
	*o = PaymentTransaction{}
	return nil
}

func paymentTransactionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PaymentTransaction) error {
	*o = PaymentTransaction{}
	return nil
}

func paymentTransactionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PaymentTransaction) error {
	*o = PaymentTransaction{}
	return nil
}

func paymentTransactionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PaymentTransaction) error {
	*o = PaymentTransaction{}
	return nil
}

func paymentTransactionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PaymentTransaction) error {
	*o = PaymentTransaction{}
	return nil
}

func paymentTransactionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PaymentTransaction) error {
	*o = PaymentTransaction{}
	return nil
}

func paymentTransactionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PaymentTransaction) error {
	*o = PaymentTransaction{}
	return nil
}

func paymentTransactionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PaymentTransaction) error {
	*o = PaymentTransaction{}
	return nil
}

func testPaymentTransactionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PaymentTransaction{}
	o := &PaymentTransaction{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction object: %s", err)
	}

	AddPaymentTransactionHook(boil.BeforeInsertHook, paymentTransactionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	paymentTransactionBeforeInsertHooks = []PaymentTransactionHook{}

	AddPaymentTransactionHook(boil.AfterInsertHook, paymentTransactionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	paymentTransactionAfterInsertHooks = []PaymentTransactionHook{}

	AddPaymentTransactionHook(boil.AfterSelectHook, paymentTransactionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	paymentTransactionAfterSelectHooks = []PaymentTransactionHook{}

	AddPaymentTransactionHook(boil.BeforeUpdateHook, paymentTransactionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	paymentTransactionBeforeUpdateHooks = []PaymentTransactionHook{}

	AddPaymentTransactionHook(boil.AfterUpdateHook, paymentTransactionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	paymentTransactionAfterUpdateHooks = []PaymentTransactionHook{}

	AddPaymentTransactionHook(boil.BeforeDeleteHook, paymentTransactionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	paymentTransactionBeforeDeleteHooks = []PaymentTransactionHook{}

	AddPaymentTransactionHook(boil.AfterDeleteHook, paymentTransactionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	paymentTransactionAfterDeleteHooks = []PaymentTransactionHook{}

	AddPaymentTransactionHook(boil.BeforeUpsertHook, paymentTransactionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	paymentTransactionBeforeUpsertHooks = []PaymentTransactionHook{}

	AddPaymentTransactionHook(boil.AfterUpsertHook, paymentTransactionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	paymentTransactionAfterUpsertHooks = []PaymentTransactionHook{}
}

func testPaymentTransactionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentTransaction{}
	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PaymentTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPaymentTransactionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentTransaction{}
	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(paymentTransactionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PaymentTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPaymentTransactionToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PaymentTransaction
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, paymentTransactionDBTypes, false, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PaymentTransactionSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*PaymentTransaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPaymentTransactionToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PaymentTransaction
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentTransactionDBTypes, false, strmangle.SetComplement(paymentTransactionPrimaryKeyColumns, paymentTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PaymentTransactions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testPaymentTransactionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentTransaction{}
	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPaymentTransactionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentTransaction{}
	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PaymentTransactionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPaymentTransactionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PaymentTransaction{}
	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PaymentTransactions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	paymentTransactionDBTypes = map[string]string{`ID`: `uuid`, `UserID`: `uuid`, `StripeChargeID`: `character varying`, `Amount`: `integer`, `Currency`: `character varying`, `Status`: `character varying`, `CreatedAt`: `timestamp without time zone`}
	_                         = bytes.MinRead
)

func testPaymentTransactionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(paymentTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(paymentTransactionAllColumns) == len(paymentTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PaymentTransaction{}
	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PaymentTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true, paymentTransactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPaymentTransactionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(paymentTransactionAllColumns) == len(paymentTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PaymentTransaction{}
	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true, paymentTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PaymentTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, paymentTransactionDBTypes, true, paymentTransactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(paymentTransactionAllColumns, paymentTransactionPrimaryKeyColumns) {
		fields = paymentTransactionAllColumns
	} else {
		fields = strmangle.SetComplement(
			paymentTransactionAllColumns,
			paymentTransactionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PaymentTransactionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPaymentTransactionsUpsert(t *testing.T) {
	t.Parallel()

	if len(paymentTransactionAllColumns) == len(paymentTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PaymentTransaction{}
	if err = randomize.Struct(seed, &o, paymentTransactionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PaymentTransaction: %s", err)
	}

	count, err := PaymentTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, paymentTransactionDBTypes, false, paymentTransactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PaymentTransaction struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PaymentTransaction: %s", err)
	}

	count, err = PaymentTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
